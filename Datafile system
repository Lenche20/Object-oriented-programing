#include<iostream>
#include<cstring>

using namespace std;

enum Extension { txt,pdf,exe};

class File {
private:
    char *ime; //dinamicka niza
    Extension ex;
    char *sopstvenik; //dinamicka niza
    int golemina;
public:
    File() {}
    File(char *ime, char *sopstvenik,int gol,Extension ex) {
        this->ime=new char [strlen(ime)+1];
        strcpy(this->ime,ime);
        this->ex=ex;
        this->sopstvenik=new char [strlen(sopstvenik)+1];
        strcpy(this->sopstvenik,sopstvenik);
        golemina=gol;
    }
    File(const File &f) {
        ime=new char [strlen(f.ime)+1];
        strcpy(ime,f.ime);
        ex=f.ex;
        sopstvenik=new char [strlen(f.sopstvenik)+1];
        strcpy(sopstvenik,f.sopstvenik);
        golemina=f.golemina;
    }
    File &operator=(const File &f) {
        if(this!=&f) {
            delete []ime;
            delete []sopstvenik;
            ime=new char [strlen(f.ime)+1];
            strcpy(ime,f.ime);
            ex=f.ex;
            sopstvenik=new char [strlen(f.sopstvenik)+1];
            strcpy(sopstvenik,f.sopstvenik);
            golemina=f.golemina;
        }
        return *this;
    }
    void print() {
        cout<<"File name: "<<ime;
        if(ex==0)
            cout<<".pdf"<<endl;
        if(ex==1)
            cout<<".txt"<<endl;
        if(ex==2)
            cout<<".exe"<<endl;
        cout<<"File owner: "<<sopstvenik<<endl;
        cout<<"File size: "<<golemina<<endl;

    }
    bool equals(const File & that) {
        return (strcmp(ime,that.ime)==0&&ex==that.ex&& strcmp(sopstvenik,that.sopstvenik)==0);
    }
    bool equalsType(const File & that) {
        return (strcmp(ime,that.ime)==0&&ex==that.ex);
    }
    ~File() {
        delete []ime;
        delete []sopstvenik;
    }
};

class Folder {
private:
    char *ime; //dinamicka niza
    int n;
    File *file; //dinamicka niza
public:
    Folder(const char* name) {
        n=0;
        ime = new char [strlen(name)+1];
        strcpy(ime,name);
        file=new File [0];
    }
    Folder(const Folder &f) {
        n=f.n;
        ime= new char [strlen(f.ime)+1];
        strcpy(ime, f.ime);
        file =new File[f.n];
        for(int i=0; i<f.n; i++) {
            file[i]=f.file[i];
        }
    }
    Folder &operator=(const Folder &f) {
        if(this==&f) {
            n=f.n;
            ime= new char [strlen(f.ime)+1];
            strcpy(ime, f.ime);
            file =new File[f.n];
            for(int i=0; i<f.n; i++) {
                file[i]=f.file[i];
            }
        }
        return *this;
    }
    ~Folder() {
        delete []ime;
        delete []file;
    }
    void print() {
        cout<<"Folder name: "<<ime<<endl;
        for(int i=0; i<n; i++) {
            file[i].print();
        }
    }
    void remove(const File & file) {
        File *nov=new File[n];
        int i,j;
        for(i=0,j=0; i<n; i++) {
            if(!(this->file[i].equals(file))) {
                nov[j++]=this->file[i];
            } else {
                n--;
                continue;
            }
        }
        delete []this->file;
        this->file=nov;
    }
    void add(const File & file) {
        File *nov=new File[n+1];
        for(int i=0; i<n; i++) {
            nov[i]=this->file[i];
        }
        nov[n++]=file;
        delete []this->file;
        this->file=nov;
    }
};

int main() {
    char fileName[20];
    char fileOwner[20];
    int ext;
    int fileSize;

    int testCase;
    cin >> testCase;
    if (testCase == 1) {
        cout << "======= FILE CONSTRUCTORS AND = OPERATOR =======" << endl;
        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File created = File(fileName, fileOwner, fileSize, (Extension) ext);
        File copied = File(created);
        File assigned = created;

        cout << "======= CREATED =======" << endl;
        created.print();
        cout << endl;
        cout << "======= COPIED =======" << endl;
        copied.print();
        cout << endl;
        cout << "======= ASSIGNED =======" << endl;
        assigned.print();
    } else if (testCase == 2) {
        cout << "======= FILE EQUALS & EQUALS TYPE =======" << endl;
        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File first(fileName, fileOwner, fileSize, (Extension) ext);
        first.print();

        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File second(fileName, fileOwner, fileSize, (Extension) ext);
        second.print();

        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File third(fileName, fileOwner, fileSize, (Extension) ext);
        third.print();

        bool equals = first.equals(second);
        cout << "FIRST EQUALS SECOND: ";
        if (equals)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

        equals = first.equals(third);
        cout << "FIRST EQUALS THIRD: ";
        if (equals)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

        bool equalsType = first.equalsType(second);
        cout << "FIRST EQUALS TYPE SECOND: ";
        if (equalsType)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

        equalsType = second.equals(third);
        cout << "SECOND EQUALS TYPE THIRD: ";
        if (equalsType)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

    } else if (testCase == 3) {
        cout << "======= FOLDER CONSTRUCTOR =======" << endl;
        cin >> fileName;
        Folder folder(fileName);
        folder.print();

    } else if (testCase == 4) {
        cout << "======= ADD FILE IN FOLDER =======" << endl;
        char name[20];
        cin >> name;
        Folder folder(name);

        int iter;
        cin >> iter;

        while (iter > 0) {
            cin >> fileName;
            cin >> fileOwner;
            cin >> fileSize;
            cin >> ext;

            File file(fileName, fileOwner, fileSize, (Extension) ext);
            folder.add(file);
            iter--;
        }
        folder.print();
    } else {
        cout << "======= REMOVE FILE FROM FOLDER =======" << endl;
        char name[20];
        cin >> name;
        Folder folder(name);

        int iter;
        cin >> iter;

        while (iter > 0) {
            cin >> fileName;
            cin >> fileOwner;
            cin >> fileSize;
            cin >> ext;

            File file(fileName, fileOwner, fileSize, (Extension) ext);
            folder.add(file);
            iter--;
        }
        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File file(fileName, fileOwner, fileSize, (Extension) ext);
        folder.remove(file);
        folder.print();
    }
    return 0;
}
